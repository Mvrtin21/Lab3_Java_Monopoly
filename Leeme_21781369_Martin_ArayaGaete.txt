CAPITALIA - Monopoly  
=====================
Autor: Martín Araya
Correo: martin.araya.g@usach.cl

== Instrucciones de Ejecución  

1. Requisitos Previos 
   - Tener instalado SWI-Prolog (versión 8.4 o superior).
   - Clonar o mover todos los archivos .pl del proyecto a una misma carpeta. 

2. Archivos Necesarios
   - jugador_21781369_Martin_ArayaGaete.pl (TDA Jugador)
   - propiedad_21781369_Martin_ArayaGaete.pl (TDA Propiedad)
   - carta_21781369_Martin_ArayaGaete.pl (TDA Carta)
   - tablero_21781369_Martin_ArayaGaete.pl (TDA Tablero)
   - juego_21781369_Martin_ArayaGaete.pl (Lógica principal de Juego)
   - pruebas_21781369_Martin_ArayaGaete.pl (Script de pruebas)
   - Cualquier otro script de escenario (script1_21781369_… .pl, script2_21781369_… .pl, etc.)

3. Carga de Módulos en SWI-Prolog
   - Abrir SWI-Prolog; verás el prompt: ?- 
   - Ejecutar (consulta) el archivo 'pruebas_21781369_Martin_ArayaGaete.pl' para cargar todos 
     los módulos
   - Con esto, todos los predicados (jugador/8, propiedad/9, carta/5, etc.) ya estarán disponibles 
     para ejecutar cualquier script de escenario.

4. Ejecución de Scripts de Escenario
   - En la misma sesión de SWI-Prolog, copiar el contenido de uno de los scripts de escenario 
     (script1_21781369_Martin_ArayaGaete.pl, script2_21781369_Martin_ArayaGaete.pl, etc.)
   - Pegar el scriptX_21781369_Martin_ArayaGaete.pl a la consulta de 
     pruebas_21781369_Martin_ArayaGaete.pl
   - Al presionar Enter tras pegar todo el bloque, SWI-Prolog ejecutará cada meta en secuencia 
     y mostrará los resultados (unificación de variables como G1 = …).

5. Depuración de Errores Comunes (Al intentar crear un nuevo script)
   - IDs duplicados: Verifica que cada jugador/8, propiedad/9 y carta/5 tenga un ID único.
   - Propiedad no agregada al tablero: Si usas jugadorComprarPropiedad(J1, P3, …) pero P3 nunca 
     se incluyó con tableroAgregarPropiedades/3, dará falso o error.
   - Montos insuficientes: Si el precio de la propiedad es mayor que el capital del jugador 
     (ej. $1500), la compra falla con false. Ajusta valores o el capital inicial si es necesario.
   - Variables intermedias no unificadas: Asegúrate de recolectar salidas como P1_v2, J1_v2, 
     antes de usarlas en la siguiente llamada.
   - Metas “false” intencionales: Todos los casos que esperen false deben estar comentados o 
     aislados, para que no interrumpan el bloque de ejecución.

5. Reglas Clave  
   - Bancarrota: Un jugador pierde si su dinero llega a 0 o menos.  
   - Cárcel:  
     - Pagar $500 o usar tarjeta para salir.  
     - Tres dobles/triples seguidos envían a la cárcel o sacarte de ella.  
   - Cartas: 
     - Las cartas de Suerte/Comunidad se activan al caer en sus casillas.  

6. Acciones permitidas en juegoJugarTurno/6:

   - juegoConstruirCasa (Argumentos: [JuegoPrevio, Propiedad, JuegoModificado])

   - juegoConstruirHotel (Argumentos: [JuegoPrevio, Propiedad, JuegoModificado])

   - jugadorComprarPropiedad (Argumentos: [JugadorActual, Propiedad, PropiedadModificada, JugadorModificado])

   - propiedadHipotecar (Argumentos: [Propiedad, PropiedadModificada])

   - pagarSalirCarcel (Argumentos: [])

   - jugarCartaSalirCarcel (Argumentos: [])

7. Notas importantes
   - Los scripts funcionan a la perfección, y más aun si se prueba en el IDE web (mas orden, 
     mejorando su visualización), pero no se pudo realizar pruebas mas de 3 veces de cada predicado 
     por el alto costo que requiere usar backtracking, haciendo que al consultar el script, 
     no suceda nada, por lo que se quitaron varias consultas.
     -> Actualización 03/06:
        >>> Se edito el script2, el cual prueba 3 veces cada predicado, se esta probando para script 1,
            se comprueba su funcionamiento a partir de probarlo 3 veces, pero igualmente, se recomienda
            rigurosidad al agregar cualquier otro predicado.  

   - IDs únicos: Usa valores numéricos distintos para cada jugador, propiedad, carta y semilla (seed).

   - Si se desea crear propiedades, estas deben crearse en posiciones consecutivas.

   - Cada vez que invoques juegoJugarTurno/6, emplea una variable nueva para el estado resultante 
     (G1, G2, G3 …). No repitas nombres como G3 en dos llamadas consecutivas, pues SWI-Prolog los 
     unifica y corrompe el flujo de prueba.
